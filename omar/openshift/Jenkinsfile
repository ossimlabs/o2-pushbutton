
properties([
        parameters([
                string(name: 'BUILD_NODE', defaultValue: 'omar-build', description: 'Label to use for node selections'),
                string(name: 'GIT_PRIVATE_SERVER_URL', defaultValue: 'git@github.com:Maxar-Corp', description: 'Git url for config-repo'),
                string(name: 'CREDENTIALS_ID', defaultValue: 'cicdGithub', description: 'Credentials ID for github'),
                string(name: 'CONFIG_REPO_NAME', defaultValue: 'config-repo', description: 'The config-repo repository name that will be checked out'),
                string(name: 'CONFIG_REPO_BRANCH', defaultValue: 'dev', description: 'The config-repo branch that will be checked out'),
                string(name: 'OPENSHIFT_URL', defaultValue: 'https://openshift.ossim.io:8443', description: 'The url of the openshift instance to deploy to'),
                string(name: 'APP_TO_DEPLOY', defaultValue: 'all', description: 'The single app to deploy to the cluster, defaults to all apps'),
                text(name: 'ADHOC_CONFIG_YML', defaultValue: '', description: 'Use this as the config file instead of pulling one from a repo'),
                booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')
        ]),
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
        disableConcurrentBuilds()
])

node ("${BUILD_NODE}"){
    stage("Load Variables"){
        dir("o2-pushbutton"){
            checkout(scm)
        }
    }

    try {
        stage("Checkout"){
            dir( "${CONFIG_REPO_NAME}" ){

                println "Using ${CONFIG_REPO_NAME} branch: ${CONFIG_REPO_BRANCH}"

                final String refSpec = "+refs/heads/*:refs/remotes/origin/*"
                checkout([
                        $class: 'GitSCM',
                        branches: [[ name: CONFIG_REPO_BRANCH ]],
                        userRemoteConfigs: [[
                                                    refspec: refSpec,
                                                    url: "${GIT_PRIVATE_SERVER_URL}/${CONFIG_REPO_NAME}.git"]]
                ])
            }
        }

        stage("Deploy"){
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                              credentialsId: 'dockerCredentials',
                              usernameVariable: 'DOCKER_REGISTRY_USERNAME',
                              passwordVariable: 'DOCKER_REGISTRY_PASSWORD'],
                             [$class: 'UsernamePasswordMultiBinding',
                              credentialsId: 'openshiftCredentials',
                              usernameVariable: 'OPENSHIFT_USERNAME',
                              passwordVariable: 'OPENSHIFT_PASSWORD']])
                    {

                        if (ADHOC_CONFIG_YML){
                            config_file = "adhocDeployConfig.yml"
                            sh "echo '${ADHOC_CONFIG_YML}' > adhocDeployConfig.yml"
                        } else {
                            config_file = "./${CONFIG_REPO_NAME}/deployConfig.yml"
                        }

                        if (APP_TO_DEPLOY == 'all' || APP_TO_DEPLOY == ''){
                            app_arg = '--all'
                        } else {
                            app_arg = '-s ${APP_TO_DEPLOY}'
                        }

                        sh """
                            python \
                             o2-pushbutton/omar/openshift/python/deploy-app.py \
                              -t o2-pushbutton/omar/openshift/templates \
                              -c ./${config_file} \
                              -m ${CONFIG_REPO_NAME}/configmaps \
                              -o ${OPENSHIFT_URL} \
                              --remove \
                              --loglevel debug \
                              DOCKER_REGISTRY_PASSWORD=${DOCKER_REGISTRY_PASSWORD} \
                              ${app_arg}
                        """
                    }
        }

        stage("Archive Build Package"){
            sh """
                ./o2-pushbutton/omar/openshift/build-omar-deploy-package.sh ${CONFIG_REPO_NAME}
            """
            archiveArtifacts("omar-builder.tgz")
        }
    } finally {
        stage("Clean Workspace") {
            if (Boolean.parseBoolean(CLEAN_WORKSPACE))
                step([$class: 'WsCleanup'])
        }
    }
}
