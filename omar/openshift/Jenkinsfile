
properties([
        parameters([
                string(name: 'BUILD_NODE', defaultValue: 'omar-build', description: 'Label to use for node selections'),
                string(name: 'CONFIG_REPO_BRANCH', defaultValue: 'dev', description: 'The config-repo branch that will be checked out'),
                booleanParam(name: 'DEPLOY', defaultValue: true, description: 'Whether to actually deploy OMAR or not'),
                string(name: 'APP_TO_DEPLOY', defaultValue: 'all', description: 'The single app to deploy to the cluster, defaults to all apps'),
                text(name: 'ADHOC_CONFIG_YML', defaultValue: '', description: 'Use this as the config file instead of pulling one from a repo'),
                string(name: 'PACKAGE_NAME', defaultValue:'omar-dev.tgz', description: 'Desired name for the O2 deliverable'),
                booleanParam(name: 'PUSH_TO_BUCKET', defaultValue: true, description: 'Push the built package to an s3 bucket'),
                string(name: 'BUCKET_NAME', defaultValue:'o2-private', description: 'Desired S3 bucket to archive the O2 deliverable'),
                booleanParam(name: 'PUSH_TO_REPO', defaultValue: false, description: 'Push the built package to a git repo'),
                string(name: 'DEPLOY_PACKAGE_REPO_NAME', defaultValue: 'omar-deploy-package', description: 'The repo name that will be deployed to'),
                string(name: 'DEPLOY_PACKAGE_REPO_BRANCH', defaultValue: 'dev', description: 'The repo branch that will be pushed to'),
                booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')
        ]),
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
        disableConcurrentBuilds()
])

node ("${BUILD_NODE}"){
    stage("Checkout O2-Pushbutton"){
        dir("o2-pushbutton"){
            checkout(scm)
        }
    }

    stage("Load Variables")
    {
        withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
            step ([$class: "CopyArtifact",
                projectName: o2ArtifactProject,
                filter: "common-variables.groovy",
                flatten: true])
        }

        load "common-variables.groovy"
    }

    try {
        stage("Checkout"){
            dir( "${CONFIG_REPO}" ){

                println "Using ${CONFIG_REPO} branch: ${CONFIG_REPO_BRANCH}"

                final String refSpec = "+refs/heads/*:refs/remotes/origin/*"
                checkout([
                        $class: 'GitSCM',
                        branches: [[ name: CONFIG_REPO_BRANCH ]],
                        userRemoteConfigs: [[
                                                    refspec: refSpec,
                                                    url: "${GIT_PRIVATE_SERVER_URL}/${CONFIG_REPO}.git"]]
                ])
            }
        }

        stage("Deploy"){
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                              credentialsId: 'dockerCredentials',
                              usernameVariable: 'DOCKER_REGISTRY_USERNAME',
                              passwordVariable: 'DOCKER_REGISTRY_PASSWORD'],
                             [$class: 'UsernamePasswordMultiBinding',
                              credentialsId: 'openshiftCredentials',
                              usernameVariable: 'OPENSHIFT_USERNAME',
                              passwordVariable: 'OPENSHIFT_PASSWORD']])
                    {
                        if (Boolean.parseBoolean(DEPLOY)) {

                            if (ADHOC_CONFIG_YML){
                                config_file = "adhocDeployConfig.yml"
                                sh "echo '${ADHOC_CONFIG_YML}' > adhocDeployConfig.yml"
                            } else {
                                config_file = "./${CONFIG_REPO}/deployConfig.yml"
                            }

                            if (APP_TO_DEPLOY == 'all' || APP_TO_DEPLOY == ''){
                                app_arg = '--all'
                            } else {
                                app_arg = '-s ${APP_TO_DEPLOY}'
                            }

                            sh """
                                python \
                                 o2-pushbutton/omar/openshift/python/deploy-app.py \
                                  -t o2-pushbutton/omar/openshift/templates \
                                  -c ./${config_file} \
                                  -m ${CONFIG_REPO}/configmaps \
                                  -o ${OPENSHIFT_URL} \
                                  --remove \
                                  --loglevel debug \
                                  --overrides DOCKER_REGISTRY_PASSWORD=${DOCKER_REGISTRY_PASSWORD} \
                                  ${app_arg}
                            """
                        }
                    }
        }

        stage("Archive Build Package"){
            sh """
                ./o2-pushbutton/omar/openshift/build-omar-deploy-package.sh ${CONFIG_REPO} ${PACKAGE_NAME}
            """
            archiveArtifacts(PACKAGE_NAME)
        }

        stage("Push deploy package to s3"){
            if (Boolean.parseBoolean(PUSH_TO_BUCKET)) {
                sh """
                    aws s3 cp ${PACKAGE_NAME} s3://${BUCKET_NAME}/o2-builder-packages/${PACKAGE_NAME} --no-progress
                """
            }
        }

        stage("Push deploy package to repo"){
            if (Boolean.parseBoolean(PUSH_TO_REPO)) {
                withCredentials([sshUserPrivateKey(credentialsId: GIT_SSH_CREDENTIALS_ID, keyFileVariable: 'SSH_KEYFILE', passphraseVariable: '', usernameVariable: '')]) {
                    sh """
                        cd omar-deploy-package
                        git init
                        git checkout -b "${DEPLOY_PACKAGE_REPO_BRANCH}"
                        rm ./oc
                        git add . --all
                        git commit -m "Push of deploy package"
                        export GIT_SSH_COMMAND="ssh -i ${SSH_KEYFILE} -o StrictHostKeyChecking=no"
                        git push -f -u "${GIT_PRIVATE_SERVER_URL}/${DEPLOY_PACKAGE_REPO_NAME}" "${DEPLOY_PACKAGE_REPO_BRANCH}"
                    """
                }
            }
        }
        
    } finally {
        stage("Clean Workspace") {
            if (Boolean.parseBoolean(CLEAN_WORKSPACE))
                step([$class: 'WsCleanup'])
        }
    }
}
